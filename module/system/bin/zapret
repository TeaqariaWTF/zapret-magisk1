MODPATH="/data/adb/modules/zapret"

CURRENTSTRATEGY=$(cat "$MODPATH/config/current-strategy" 2>/dev/null || echo "Unknown")
CURRENTDNS=$(cat "$MODPATH/config/current-plain-dns" 2>/dev/null || echo "Unknown")
CURRENTDNSMODE=$(cat "$MODPATH/config/current-dns-mode" 2>/dev/null || echo "Unknown")
CURRENTADVANCEDRULES=$(cat "$MODPATH/config/current-advanced-rules" 2>/dev/null || echo "Unknown")

start_service() {
    if pgrep -f "nfqws" > /dev/null; then
        echo "! nfqws is already running"
    else
        "$MODPATH/service.sh" > /dev/null 2>&1 &
        echo "- Service started"
    fi
}

stop_service() {
    su -c "$MODPATH/uninstall.sh" > /dev/null 2>&1 &
    echo "- Service stopped"
}

toggle_service() {
    if pgrep -f "nfqws" > /dev/null; then
        stop_service
    else
        start_service
    fi
}

restart_service() {
    stop_service
    sleep 1
    start_service
}

setup() {
    clear
    echo "- Enable advanced rules? (No - 0 / Yes - 1)"
    echo "If you enable this, DNS-over-TLS, VPN, and tethering will be disabled"
    echo "This may help prevent DNS leaks via DNS-over-TLS"
    echo "- <3 :"
    read -r rules
    case "$rules" in
        0)
            ;;
        1)
            ;;
        *)
            echo "! Invalid choice"
            exit 1
            ;;
    esac

    echo ""
    echo "- Select DNS mode:"
    echo "0 - None"
    echo "1 - Plain DNS"
    echo "2 - DNSCrypt"
    echo "- <3 :"
    read -r dns_mode
    case "$dns_mode" in
        0)
            ;;
        1)
            echo ""
            echo "- Enter the DNS address (IPv4):"
            read -r user_dns
            if ! echo "$user_dns" | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; then
                echo "! Invalid DNS address"
                return 1
            fi
            ;;
        2)
            setup_dnscrypt
            ;;
        *)
            echo "! Invalid choice"
            exit 1
            ;;
    esac

    echo ""
    echo "- Available strategies:"
    for strategy in "$MODPATH/strategy"/*.sh; do
        echo "$(basename "$strategy" .sh)"
    done
    echo "- <3 :"
    read -r user_strategy
    if [ -f "$MODPATH/strategy/$user_strategy.sh" ]; then
        echo "- Done!"
    else
        echo "! Invalid name of strategy"
    fi
    
    echo ""
    echo "$user_dns" > "$MODPATH/config/current-plain-dns"
    echo "$user_strategy" > "$MODPATH/config/current-strategy"
    echo "$dns_mode" > "$MODPATH/config/current-dns-mode"
    echo "$rules" > "$MODPATH/config/current-advanced-rules"
    echo "$dnscrypt_mode" > "$MODPATH/config/dnscrypt-files-mode"
    [[ -n "$cloaking_link" ]] && echo "$cloaking_link" > "$MODPATH/config/cloaking-rules-link"
    [[ -n "$blocked_link" ]] && echo "$blocked_link" > "$MODPATH/config/blocked-names-link"
    echo "- Done!"
    echo "! Changes will be applied on next start"
}

setup_dnscrypt() {
    echo
    echo "- Select DNSCrypt auto-update file mode:"
    echo "0 - None"
    echo "1 - cloaking-rules.txt"
    echo "2 - cloaking-rules.txt + blocked-names.txt"
    read -rp "- <3 : " dnscrypt_mode

    echo ""
    echo "- Enter link to cloaking-rules.txt:"
    if [ -f "$MODPATH/config/cloaking-rules-link" ]; then
        current_link_cloaking=$(cat "$MODPATH/config/cloaking-rules-link")
        echo "- Current: $current_link_cloaking"
    else
        current_link_cloaking=""
        echo "- No link currently set."
    fi
    echo "- <3 :"
    read -r link_cloaking_rules

    if [ -z "$link_cloaking_rules" ]; then
        echo "- No changes to the link, keeping existing: $current_link_cloaking"
    else
        if curl -fsSL --head "$link_cloaking_rules" >/dev/null 2>&1 || wget -q --spider "$link_cloaking_rules"; then
            echo "$link_cloaking_rules" > "$MODPATH/config/cloaking-rules-link"
            echo "- Link updated to: $link_cloaking_rules"
        else
            echo "! The provided link is not reachable. Keeping: $current_link_cloaking"
        fi
    fi

    echo ""
    echo "- Enter link to blocked-names.txt:"
    if [ -f "$MODPATH/config/blocked-names-link" ]; then
        current_link_blocked=$(cat "$MODPATH/config/blocked-names-link")
        echo "- Current: $current_link_blocked"
    else
        current_link_blocked=""
        echo "- No link currently set."
    fi
    echo "- <3 :"
    read -r link_blocked_names

    if [ -z "$link_blocked_names" ]; then
        echo "- No changes to the link, keeping existing: $current_link_blocked"
    else
        if curl -fsSL --head "$link_blocked_names" >/dev/null 2>&1 || wget -q --spider "$link_blocked_names"; then
            echo "$link_blocked_names" > "$MODPATH/config/blocked-names-link"
            echo "- Link updated to: $link_blocked_names"
        else
            echo "! The provided link is not reachable. Keeping: $current_link_blocked"
        fi
    fi
}

command_info() {
    echo "@ Zapret Module - GitHub: sevcator/zapret-magisk <3"
    echo ""
    echo "- Current strategy: $CURRENTSTRATEGY"

    if [ "$CURRENTDNSMODE" -eq 2 ]; then
        echo "- Current DNS Mode: DNSCrypt-Proxy"
    elif [ "$CURRENTDNSMODE" -eq 1 ]; then
        echo "- Current DNS Mode: Plain ($CURRENTDNS)"
    elif [ "$CURRENTDNSMODE" -eq 0 ]; then
        echo "- Current DNS Mode: None"
    else
        echo "- Current DNS Mode: $CURRENTDNS"
    fi

    if [ "$CURRENTADVANCEDRULES" -eq 1 ]; then
        echo "- Current advanced rules: Enabled"
    elif [ "$CURRENTADVANCEDRULES" -eq 0 ]; then
        echo "- Current advanced rules: Disabled"
    else
        echo "- Current advanced rules: Unknown"
    fi

    echo ""
    echo "- Available commands:"
    echo "zapret start    - Start the zapret service"
    echo "zapret stop     - Stop the zapret service"
    echo "zapret restart  - Restart the zapret service"
    echo "zapret toggle   - Toggle the zapret service"
    echo "zapret setup    - Configure the zapret service"
}

unknown_command() {
    echo "! Unknown command: $1"
}

if [ -z "$1" ]; then
    command_info
else
    case "$1" in
        start)
            start_service
            ;;
        stop)
            stop_service
            ;;
        toggle)
            toggle_service
            ;;
        restart)
            restart_service
            ;;
        setup)
            setup
            ;;
        *)
            unknown_command "$1"
            ;;
    esac
fi