MODPATH="/data/adb/modules/zapret"

CURRENTSTRATEGY=$(cat "$MODPATH/config/current-strategy" 2>/dev/null || echo "Unknown")
DNSCRYPTENABLE=$(cat "$MODPATH/config/dnscrypt-enable" 2>/dev/null || echo "0")
CLOAKINGRULESLINK=$(cat "$MODPATH/config/cloaking-rules-link" 2>/dev/null || echo "https://raw.githubusercontent.com/sevcator/dnscrypt-proxy-stuff/refs/heads/main/cloaking-rules.txt")
BLOCKEDUPDATE=$(cat "$MODPATH/config/dnscrypt-blocked-update" 2>/dev/null || echo "0")
BLOCKEDNAMESLINK=$(cat "$MODPATH/config/blocked-names-link" 2>/dev/null || echo "https://raw.githubusercontent.com/sevcator/dnscrypt-proxy-stuff/refs/heads/main/blocked-names.txt")

command_info() {
    echo "! Zapret Module for Magisk â€” @sevcator/zapret-magisk"
    echo "- Current strategy: $CURRENTSTRATEGY"
    case "$DNSCRYPTENABLE" in
        1) echo "- DNSCrypt-Proxy enabled" ;;
        0) echo "- No DNS" ;;
        *) echo "- Unknown DNS state" ;;
    esac
    echo ""
    echo "- Available commands:"
    echo "zapret start    - Start the zapret service"
    echo "zapret stop     - Stop the zapret service"
    echo "zapret restart  - Restart the zapret service"
    echo "zapret toggle   - Toggle the zapret service"
    echo "zapret setup    - Configure the zapret service"
    echo "zapret update   - Update the DNSCrypt-Proxy files"
}

start_service() {
    if pgrep -f "nfqws" > /dev/null; then
        echo "! nfqws is already running"
    else
        if [ -x "$MODPATH/service.sh" ]; then
            "$MODPATH/service.sh" > /dev/null 2>&1 &
            echo "- Service started"
        else
            echo "! service.sh not found or not executable"
        fi
    fi
}

stop_service() {
    if [ -x "$MODPATH/uninstall.sh" ]; then
        su -c "$MODPATH/uninstall.sh" > /dev/null 2>&1 && echo "- Service stopped"
    else
        echo "! uninstall.sh not found or not executable"
    fi
}

toggle_service() {
    if pgrep -f "nfqws" > /dev/null; then
        stop_service
    else
        start_service
    fi
}

restart_service() {
    stop_service
    sleep 1
    start_service
}

setup() {
    mkdir -p "$MODPATH/config"

    echo -n "- Enable DNSCrypt-Proxy? "
    IFS= read response
    case "$(echo "$response" | tr A-Z a-z)" in
        y|yes) dns_mode="1" ;;
    esac

    echo "- Available strategies:"
    strategy_list=()
    while IFS= read file; do
        strategy_name=$(basename "$file" .sh)
        echo "  * $strategy_name"
        strategy_list+=("$strategy_name")
    done < <(find "$MODPATH/strategy" -type f -name "*.sh" 2>/dev/null)

    echo -n "- Enter the strategy name: "
    IFS= read user_strategy
    if [ ! -f "$MODPATH/strategy/${user_strategy}.sh" ]; then
        echo "! Invalid or empty strategy, using current: $CURRENTSTRATEGY"
        user_strategy="$CURRENTSTRATEGY"
    fi

    if [ "$dns_mode" = "1" ]; then
        echo -n "- Auto-update cloaking rules for DNSCrypt-Proxy? "
        IFS= read resp
        case "$(echo "$resp" | tr A-Z a-z)" in
            y|yes)
                echo "- Current cloaking link: $CLOAKINGRULESLINK"
                echo -n "- Enter new cloaking rules link (leave empty to keep): "
                IFS= read new_link
                if [ -n "$new_link" ]; then
                    if curl -fsSL --head "$new_link" >/dev/null 2>&1 || wget -q --spider "$new_link"; then
                        CLOAKINGRULESLINK="$new_link"
                    else
                        echo "! Link not reachable, keeping old"
                    fi
                else
                    echo "- No changes to cloaking link"
                fi
                ;;
        esac

        echo -n "- Auto-update blocked names for DNSCrypt-Proxy? "
        IFS= read block_resp
        case "$(echo "$block_resp" | tr A-Z a-z)" in
            y|yes)
                echo "- Current blocked link: $BLOCKEDNAMESLINK"
                echo -n "- Enter new blocked-names link (leave empty to keep): "
                IFS= read block_link
                if [ -n "$block_link" ]; then
                    if curl -fsSL --head "$block_link" >/dev/null 2>&1 || wget -q --spider "$block_link"; then
                        BLOCKEDNAMESLINK="$block_link"
                        BLOCKEDUPDATE="1"
                    else
                        echo "! Link not reachable, keeping old"
                    fi
                else
                    echo "- No changes to blocked-names link"
                fi
                ;;
        esac
    fi

    echo "$dns_mode" > "$MODPATH/config/dnscrypt-enable"
    echo "$user_strategy" > "$MODPATH/config/current-strategy"
    echo "$CLOAKINGRULESLINK" > "$MODPATH/config/cloaking-rules-link"
    echo "$BLOCKEDUPDATE" > "$MODPATH/config/dnscrypt-blocked-update"
    echo "$BLOCKEDNAMESLINK" > "$MODPATH/config/blocked-names-link"

    echo "- Done! Changes will apply on next start"
}

update() {
    echo "Cloaking rules link: $CLOAKINGRULESLINK"
    echo "Blocked names link: $BLOCKEDNAMESLINK"
    echo ""
    echo -n "- Update cloaking rules? "
    IFS= read resp
    case "$(echo "$resp" | tr A-Z a-z)" in
        y|yes)
        if [ -n "$CLOAKINGRULESLINK" ]; then
            if command -v curl > /dev/null 2>&1; then
                curl -fsSL -o "$MODPATH/dnscrypt/cloaking-rules.txt" "$CLOAKINGRULESLINK"
                echo "- Updated!"
            else
                echo "! curl not found, can't download cloaking rules file"
            fi
        else
            echo "! Source is not found to download"
        fi
        ;;
    esac

    echo -n "- Update blocking names? "
    IFS= read resp
    case "$(echo "$resp" | tr A-Z a-z)" in
        y|yes)
        if [ -n "$BLOCKEDNAMESLINK" ]; then
            if command -v curl > /dev/null 2>&1; then
                curl -fsSL -o "$MODPATH/dnscrypt/blocked-names.txt" "$BLOCKEDNAMESLINK"
                echo "- Updated!"
            else
                echo "! curl not found, can't download blocked names file"
            fi
        else
            echo "! Source is not found to download"
        fi
        ;;
    esac

    echo "- Done! Changes will apply on next start"
}

unknown_command() {
    echo "! Unknown command: $1"
}

case "$1" in
    "") command_info ;;
    start) start_service ;;
    stop) stop_service ;;
    toggle) toggle_service ;;
    restart) restart_service ;;
    setup) setup ;;
    update) update ;;
    *) unknown_command "$1" ;;
esac
